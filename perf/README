The files in this directory are used to run performance related tests
on the RadixIPLookup element. Currently there are 3 sets of tests
which can be run:

1. 167k -- Uses the 167k routing table and evaluated RadixIPLookup
elements using a 5 million long randomly generated TCP dump file (5mtest.dump)

2. 1m_20 -- Uses a routing table consisting of all 2^20 /20 
routes. RadixIPLookup is evaluated using a 5 million long randomly
generated TCP dump file (5mtest.dump)

3. 1m_gt20 -- Uses a routing table consisting of 2^20 evenly
distributed /20,/24,/28,/32 routes. RadixIPLookup is evaluated using a
5 million long randomly generated TCP dump file (5mtest.dump)

4. 1m_32 -- Uses a routingable consisting of 2^20 evenly /32
addresses. These addresses are evenly distributed throughout the /32
address space. RadixIPLookup is evaluated using a 5 million long TCP
dump file consisting of all the IP addresses which match the routes in
the routing table. These addresses are repeated 5 times and randomly
shuffled. The TCP dump file is 5mshuffle.dump

The testrunner.sh file runs each one of these files using "click
radix[1-6].click" and times the result using the "time" program. 

The testrunner.sh takes an argument N which is the number of times
each click file needs to be run. The test to be run and the input TCP
dump file to be used. The times are averaged and stored in
a ".click.out" file.

Usage:

	./testrunner.sh <n> <input_prefix> <conf> <dump_file>

n		= number of times the test should be run
input_prefix  	= the prefix of the radix1.click file which 
	      	  which should be used. One from 167k, 1m_gt20, 1m_20
		  and 1m_32.
conf		= configuration file which specifies the radix
		  elements to be used.
dump_file	= The input dump file


The "conf" file contains the suffixes of the RadixIPLookup elements to
be evaluated. For example to evaluate RadixIPLookup and
RadixIPLookup7, the conf file will contain two lines:

1
7

The radix.click and setup.click files are generated on the fly by the
testrunner.sh program. These files are then run with click and is
timed using "time." The time of each run is averaged and the final
results are printed out on stdout as a CSV file.

The "mean.sh" program computes the mean wall clock time and also the
maximum resident working set. The "mean" binary program (used by
"mean.sh") computes the average of the numbers it sees on stdin.


More statistics regarding the CSV file can be obtained by passing the
CSV file to the shell script "perftable.sh" (requires R)

Usage:
	./perftable.sh <input_csv> <output_csv>

input_csv: The CSV output generated by testrunner.sh
output_csv: The performance statistics for the input

Raw cache related data can be obtained by running the "cacherunner.sh"
script (requires valgrind and cachegrind).

Usage:
	./cacherunner.sh <input_prefix> <conf> <dump_file>

input_prefix  	= the prefix of the radix1.click file which 
	      	  which should be used. One from 167k, 1m_gt20, 1m_20
		  and 1m_32.
conf		= configuration file which specifies the radix
		  elements to be used.
dump_file	= The input dump file

The conf file contains the index of the RadixIPLookup elements to be
profiled, one on each line.


The description of each RadixIPLookup element is given below.

Element			Description
---------------------------------------------------------------------
RadixIPLookup		The original RadixIPLookup element. With
			branching factor 2^8 at the first level and 2^4
			after that.

RadixIPLookup2		Radix nodes memaligned to 64 bytes. Branching
			factor of 2^8 at first level and 2^3 after that.

RadixIPLookup3		Branching factor of 2^8 at first level and 2^3
			after that.

RadixIPLookup4		Branching factor of 2^8 at first level and 2^2
			after that.

RadixIPLookup5		Branching factor of 2^16 at first level and
			2^4 after that.

RadixIPLookup6		Radix nodes memaligned to 64 bytes. Super
			children allocated in a separate call to
			new. Branching factor of 2^8 at the first
			level and 2^3 after that.

RadixIPLookup7		RadixIPLookup7 doesn't have the following
			member fields "_bitshift", "_n",
			"_nchildren". These fields are derived
			automatically from the depth at which a
			particular node is at. It has additional
			functions to calculate these fields. Branching
			factor of 2^12 at first level and 2^5 after that.

RadixIPLookup8		Branching factor of 2^12 at first level and
			2^5 after that. Used to compare performance
			against RadixIPLookup7.
			
RadixIPLookup9		Branching factor of 2^16 at first level and
			2^4 after that. Derivable fields removed.

RadixIPLookup10		Branching factor of 2^16 at first level and
			2^16 at 2nd level. Derivable fields removed.

RadixIPLookup11		Branching factor of 2^8 at first level and 2^8
			after that. Derivable fields removed.

RadixIPLookup12		Branching factor of 2^16 at first level and
			2^5 after that. Derivable fields removed.

RadixIPLookup13		Branching factor of 2^12 at first level and 
			2^5 after that. Derivable fields
			removed. Bitshift and nbuckets are calculated
			with the help of a static array.

RadixIPLookup14		Branching factor of 2^12 at first level and
			2^5 after that. Derivable fields
			removed. Fields allocated using custom allocator.

RadixIPLookup15		Branching factor of 2^16 at first level and
			2^5 after that. Derivable fields
			removed. Bitshift and nbuckets are calculated
			with the hlep of a static array.
